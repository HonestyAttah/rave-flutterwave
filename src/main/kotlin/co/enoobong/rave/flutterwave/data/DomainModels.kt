package co.enoobong.rave.flutterwave.data

import com.google.gson.annotations.SerializedName

/**
 * @author Ibanga Enoobong I
 * @since 2/27/18.
 */
sealed class Payload

data class CardPayload(
    @SerializedName("cardno") val cardNumber: String,
    val cvv: String,
    @SerializedName("expirymonth") val expiryMonth: String,
    @SerializedName("expiryyear") val expiryYear: String,
    val currency: String,
    val country: String,
    val amount: Double,
    val email: String,
    @SerializedName("phonenumber") val phoneNumber: String,
    @SerializedName("firstName") val firstName: String,
    @SerializedName("lastname") val lastName: String,
    @SerializedName("IP")
    val IP: String,
    @SerializedName("txRef") val transactionRef: String,
    @SerializedName("redirect_url") val redirectUrl: String
) : Payload() {

    var pin: String? = null
    @SerializedName("suggested_auth")
    var suggestedAuth: String? = null
    @SerializedName("device_fingerprint")
    var deviceFingerprint: String? = null
    @SerializedName("charge_type")
    var chargeType: String? = null
}

/**
 * @param accountNumber This is the account number of the customer associated with a valid bank account.
 * @param accountBank This represents the bank account to be debited. To get a list of banks,
 * call bank list API {@link RavePay#getBanks()}
 * @param currency This is the specified currency to charge in.
 * @param country This is the pair country for the transaction with respect to the currency.
 * @param email This is the email address of the customer.
 * @param phoneNumber This is the phone number linked to the user's bank account.
 * @param firstName This is the first name of the card holder or the customer.
 * @param lastName This is the last name of the card holder or the customer.
 * @param amount This is the amount to be charged
 * @param ipAddress IP - Internet Protocol. This represents the current IP address of the customer carrying out the transaction.
 * @param transactionRef This is a unique reference, unique to the particular transaction being carried out. It is generated by the merchant for every transaction
 * @param paymentType This specifies that the payment method being used eg account, ussd
 *
 * @property isUssd This identifies that a USSD transaction is being carried out.
 * @property isMobileMoneyGh This identifies that a mobile money transaction is being carried out.
 * @property isMpesa This identifies that an mpesa transaction is being carried out.
 */
data class AccountPayload(
    @SerializedName("accountnumber") val accountNumber: String,
    @SerializedName("accountbank") val accountBank: String,
    val currency: String,
    val country: String,
    val amount: Double,
    val email: String,
    @SerializedName("phonenumber") val phoneNumber: String,
    @SerializedName("firstname") val firstName: String,
    @SerializedName("lastname") val lastName: String,
    @SerializedName("IP")
    val ipAddress: String,
    @SerializedName("txRef") val transactionRef: String,
    @SerializedName("payment_type") val paymentType: String
) : Payload() {

    //Only used for Zenith bank account payment) (Format: DDMMYYYY e.g. 21051990)
    @SerializedName("passcode")
    var passCode: String? = null

    @SerializedName("device_fingerprint")
    var deviceFingerprint: String? = null

    var isUssd: Boolean
        get() = intUssd == 1
        set(value) {
            intUssd = if (value) 1 else null
        }

    @SerializedName("is_ussd")
    private var intUssd: Int? = null

    @SerializedName("is_mobile_money_gh")
    var isMobileMoneyGh: Int? = null

    @SerializedName("is_mpesa")
    var isMpesa: Int? = null
}

data class RavePayload(val hash: String, val dynamicValue: String)

enum class Environment {
    STAGING,
    LIVE
}

internal data class ChargeRequest(
    val client: String,
    val alg: String = "3DES-24"
) {
    @SerializedName("PBFPubKey")
    var publicKey: String? = null
}

data class Bank(
    @SerializedName("bankname")
    val bankName: String,
    @SerializedName("bankcode")
    val bankCode: String,
    @SerializedName("isInternetbanking")
    val isInternetBanking: Boolean = false
)

data class ApiResponse<out T>(val status: String, val message: String, val data: T?)

data class ChargeResponseData(
    @SerializedName("suggested_auth") val suggestedAuth: String,
    val chargeResponseCode: String,
    val authModelUsed: String,
    val flwRef: String,
    val chargeResponseMessage: String,
    @SerializedName("authurl") val authUrl: String
)

data class ErrorResponseData(
    @SerializedName("is_error") val isError: Boolean,
    val code: String,
    val message: String
)

data class ValidateChargePayload(
    @SerializedName("transaction_reference") val transactionRef: String,
    val otp: String
) {
    @SerializedName("PBFPubKey")
    var publicKey: String? = null
}

data class RequeryRequestPayload @JvmOverloads constructor(
    @SerializedName("flw_ref") val flwRef: String,
    val normalize: String = "1"
) {
    @SerializedName("SECKEY")
    var secretKey: String = ""
}

data class XRequeryRequestPayload @JvmOverloads constructor(
    @SerializedName("txref") var transactionRef: String = "",
    var flwRef: String = "",
    @SerializedName("last_attempt") var lastAttempt: String = "",
    @SerializedName("only_successful") var onlySuccessful: String = ""
) {
    @SerializedName("SECKEY")
    var secretKey: String = ""
}

data class RequeryResponseData(
    @SerializedName("tx_ref") val transactionRef: String,
    @SerializedName("flw_ref") val flwRef: String,
    @SerializedName("transaction_currency") val currency: String,
    val amount: Long,
    @SerializedName("charged_amount") val chargedAmount: Long,
    val card: CardDetails,
    val flwMeta: FlutterWaveMeta
)

data class FlutterWaveMeta(val chargeResponse: String, val chargeResponseMessage: String)

data class CardDetails(
    val cardBIN: String,
    @SerializedName("card_tokens") val cardTokens: List<CardToken>,
    val brand: String,
    @SerializedName("expirymonth") val expiryMonth: String,
    @SerializedName("expiryyear") val expiryYear: String,
    val last4digits: String
)

data class CardToken(
    @SerializedName("shortcode") val shortCode: String,
    @SerializedName("embedtoken") val embedToken: String
)

data class XRequeryResponseData(
    @SerializedName("txid") val transactionId: Int,
    @SerializedName("txref") val transactionRef: String,
    @SerializedName("flwref") val flwRef: String,
    @SerializedName("devicefingerprint") val deviceFingerprint: String,
    @SerializedName("cycle") val cycle: String,
    @SerializedName("amount") val amount: Long,
    @SerializedName("currency") val currency: String,
    @SerializedName("chargedamount") val chargedAmount: Long,
    @SerializedName("appfee") val appFee: Int,
    @SerializedName("merchantfee") val merchantFee: Int,
    @SerializedName("merchantbearsfee") val merchantBearsFee: Int,
    @SerializedName("chargecode") val chargeCode: String,
    @SerializedName("chargemessage") val chargeMessage: String,
    @SerializedName("authmodel") val authModel: String,
    @SerializedName("ip") val IP: String,
    val narration: String,
    val status: String,
    @SerializedName("vbvcode") val vbvCode: String,
    @SerializedName("vbvmessage") val vbvMessage: String,
    @SerializedName("authurl") val authUrl: String,
    @SerializedName("paymenttype") val paymentType: String,
    @SerializedName("paymentid") val paymentId: String,
    @SerializedName("fraudstatus") val fraudStatus: String,
    @SerializedName("chargetype") val chargeType: String,
    @SerializedName("createdday") val createdDay: Int,
    @SerializedName("createddayname") val createdDayName: String,
    @SerializedName("createdweek") val createdWeek: Int,
    @SerializedName("createdmonth") val createdMonth: Int,
    @SerializedName("createdmonthname") val createdMonthName: String,
    @SerializedName("createdquarter") val createdQuarter: Int,
    @SerializedName("createdyear") val createdYear: Int,
    @SerializedName("createdyearisleap") val createdYearIsLeap: Boolean,
    @SerializedName("createddayispublicholiday") val createdDayIsPublicHoliday: Int,
    @SerializedName("createdhour") val createdHour: Int,
    @SerializedName("createdminute") val createdMinute: Int,
    @SerializedName("createdpmam") val createdPmam: String,
    @SerializedName("created") val created: String,
    @SerializedName("customerid") val customerId: Int,
    @SerializedName("custphone") val customerPhone: String,
    @SerializedName("custnetworkprovider") val customerNetworkProvider: String,
    @SerializedName("custname") val customerName: String,
    @SerializedName("custemail") val customerEmail: String,
    @SerializedName("custemailprovider") val customerEmailProvider: String,
    @SerializedName("custcreated") val customerCreateDate: String,
    @SerializedName("accountid") val accountId: Int
)

data class PreauthorizeCardData(
    @SerializedName("id") val id: Int,
    @SerializedName("txRef") val transactionRef: String,
    @SerializedName("flwRef") val flwRef: String,
    @SerializedName("redirectUrl") val redirectUrl: String,
    @SerializedName("device_fingerprint") val deviceFingerprint: String,
    @SerializedName("cycle") val cycle: String,
    @SerializedName("amount") val amount: Long,
    @SerializedName("charged_amount") val chargedAmount: Long,
    @SerializedName("appfee") val appFee: Int,
    @SerializedName("merchantfee") val merchantFee: Int,
    @SerializedName("merchantbearsfee") val merchantBearsFee: Int,
    @SerializedName("chargeResponseCode") val chargeResponseCode: String,
    @SerializedName("chargeResponseMessage") val chargeResponseMessage: String,
    @SerializedName("authModelUsed") val authModelUsed: String,
    @SerializedName("currency") val currency: String,
    @SerializedName("IP") val IP: String,
    @SerializedName("narration") val narration: String,
    @SerializedName("status") val status: String,
    @SerializedName("vbvrespmessage") val VBVRespMessage: String,
    @SerializedName("authurl") val authUrl: String,
    @SerializedName("vbvrespcode") val VBVRespCode: String,
    @SerializedName("paymentType") val paymentType: String,
    @SerializedName("paymentId") val paymentId: String,
    @SerializedName("fraud_status") val fraudStatus: String,
    @SerializedName("charge_type") val chargeType: String,
    @SerializedName("is_live") val isLive: Int,
    @SerializedName("createdAt") val createdAt: String,
    @SerializedName("updatedAt") val updatedAt: String,
    @SerializedName("customerId") val customerId: Int,
    @SerializedName("AccountId") val accountId: Int,
    @SerializedName("customer") val customer: Customer
)

data class Customer(
    @SerializedName("id") val id: Int,
    @SerializedName("phone") val phone: String,
    @SerializedName("fullName") val fullName: String,
    @SerializedName("email") val email: String,
    @SerializedName("createdAt") val createdAt: String,
    @SerializedName("updatedAt") val updatedAt: String,
    @SerializedName("AccountId") val accountId: Int
)

data class RefundVoidResponseData(
    @SerializedName("data") val data: RefundVoidResponseExtraData,
    @SerializedName("status") val status: String
)

data class RefundVoidResponseExtraData(
    @SerializedName("responsecode") val responseCode: String,
    @SerializedName("authorizeId") val authorizeId: String,
    @SerializedName("responsemessage") val responseMessage: String,
    @SerializedName("transactionreference") val transactionReference: String
)

/**
 *
 * @property paymentType This is an optional parameter to be used when the payment type is account payment.
 * A value of 2 is to be passed
 *
 * @property card6 This can be used only when the user has entered first 6digits of their card number,
 * it also helps determine international fees on the transaction if the card being used is
 * an international card
 */
data class GetFeesPayload(
    val amount: Double,
    val currency: String
) {

    @SerializedName("PBFPubKey")
    var publicKey: String? = null

    @SerializedName("ptype")
    var paymentType: String? = null

    var card6: String? = null
}

data class GetFeeResponseData(
    @SerializedName("charge_amount") val chargeAmount: Double,
    val fee: Double,
    @SerializedName("merchantfee") val merchantFee: String,
    @SerializedName("ravefee") val raveFee: String
)

data class RefundResponseData(
    @SerializedName("AmountRefunded") val amountRefunded: Long,
    val walletId: Int,
    val createdAt: String,
    @SerializedName("AccountId") val accountId: Int,
    val id: Int,
    @SerializedName("FlwRef") val flwRef: String,
    @SerializedName("TransactionId") val transactionId: Int,
    val status: String,
    val updatedAt: String
)

data class ExchangeRateData(
    @SerializedName("responsecode") val responseCode: String?,
    @SerializedName("responsemessage") val responseMessage: String?,
    val rate: Double?,
    @SerializedName("origincurrency") val originCurrency: String?,
    @SerializedName("destinationcurrency") val destinationCurrency: String?,
    @SerializedName("lastupdated") val lastUpdated: String?,
    @SerializedName("converted_amount") val convertedAmount: Long?,
    @SerializedName("original_amount") val originalAmount: Long?
)
